var margin = {top: 20, right: 20, bottom: 70, left: 40},
    width = 700 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var barHeight = 5;

var x = d3.scale.ordinal().rangeRoundBands([0, width*1], .5);

var y = d3.scale.linear().range([height , 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(20);



createChart("resources/oilseeds.json","Agricultural Production Oilseeds","Os");
createChart("resources/foodgrains.json","Agricultural Production Foodgrains","Fg");

function createChart (filepath,replacer,replacerText){
d3.json(filepath, function(error, data) {

  data.sort(function(a,b){
      return b["3-2013"] - a["3-2013"];
  });
  var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom +50)
    .append("g")
      .attr("transform",
      "translate(" + margin.left + "," + margin.top + ")");

  var unit = data[0].Unit;

  var crops =[];

  data.forEach(function(d){
    if(d["3-2013"]=="NA" || d["3-2013"]==null)
    d["3-2013"] =0;     //Replace NA with null.
    else
    d["3-2013"] =+d["3-2013"];    //Convert to number using unary +
    d.Particulars = d.Particulars.replace(replacer,replacerText);
    crops.push(+d["3-2013"]);

  })

  x.domain(data.map(function(d) { return d.Particulars; }));
  y.domain([0, d3.max(data, function(d) { return d["3-2013"]; })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", "-.55em")
      .attr("transform", "rotate(-90)" );

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text(unit);




      svg.selectAll("bar")
        .data(data)
      .enter().append("rect")
        .style("fill", "steelblue")
        .attr("x", function(d) { return x(d.Particulars);} )
        .attr("width", x.rangeBand())
        .attr("y", function(d) { return y(d["3-2013"]); })
        .attr("height", function(d) { return height - y(d["3-2013"]); });

});

}

d3.json("resources/commercial.json", function(err,data){
   if(err)
    console.error(err);

   var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom +50)
      .append("g")
        .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

    var unit = data[0].Unit;

    var comCrops ={

      "3-1993": 0,
      "3-1994": 0,
      "3-1995": 0,
      "3-1996": 0,
      "3-1997": 0,
      "3-1998": 0,
      "3-1999": 0,
      "3-2000": 0,
      "3-2001": 0,
      "3-2002": 0,
      "3-2003": 0,
      "3-2004": 0,
      "3-2005": 0,
      "3-2006": 0,
      "3-2007": 0,
      "3-2008": 0,
      "3-2009": 0,
      "3-2010": 0,
      "3-2011": 0,
      "3-2012": 0,
      "3-2013": 0,
      "3-2014": 0
      },
        holderArray =[];



    data.forEach(function(d){
      for(var prop in d)
      {
        if((prop=="Particulars" || prop=="Unit"|| prop=="Frequency")){
            ;
        }
        else{
               if(d[prop] == "NA" || d[prop]==null)
                d[prop] = 0;

              else
                d[prop] = +d[prop];

                comCrops[prop] += d[prop];
            }


      }


    });
    for(var item in comCrops)
    {

      holderArray.push(comCrops[item]);
    }


    var keys = Object.keys(data[0]);
    keys.splice(0,3);

    x.domain(keys.map(function(d) { return d; }));
    y.domain([0, d3.max(holderArray)]);


    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
      .selectAll("text")
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", "-.55em")
        .attr("transform", "rotate(-90)" );

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text(unit);




    var bar = svg.selectAll("bar")
          .data(keys)
        .enter().append("rect")
          .style("fill", "steelblue")
          .attr("x", function(d){ return x(d);})
          .attr("height", function(d){return comCrops[d];})
          .attr("width", x.rangeBand())
          .attr("y", function(d){ return height-comCrops[d];});



});


var sAndR = {}; // Object to hold a state and its region.
var stateArray =[]; //Array of sAndR

d3.json("resources/states1.json",function(error,data){


  data.forEach(function(d){

    sAndR = {};
    sAndR.state = d["State"].toUpperCase();
    sAndR.region = d["Region"].toUpperCase();

    //An array of southern states.
    if(sAndR.region =="SOUTHERN")
    stateArray.push(sAndR.state);

  });


});



d3.json("resources/riceYield.json", function(error,data){

    var arrayRequired = [];
    data.forEach(function(d){
        var stateName = d.Particulars.replace("Agricultural Production Foodgrains Rice Yield ","").toUpperCase();
        if(stateArray.includes(stateName))
          arrayRequired.push(d);
    });

     var riceObj ={};
     var keys = Object.keys(data[0]);
     keys.splice(0,3);
     var riceArray=[];
     for (var key of keys)
     {
            riceObj.year = key;
           arrayRequired.forEach(function(d){


                var stateName = d.Particulars.replace("Agricultural Production Foodgrains Rice Yield ","").toUpperCase();
                riceObj[stateName]  = (d[key]=="NA" || d[key]==null)?0:parseFloat(d[key]);




           });
           riceArray.push(riceObj);



     }
   

});
